{"ast":null,"code":"var _jsxFileName = \"/home/nikola/projekti/Spartans AI task zadatak/pizza-place-simulator-client/src/pages/public/HomePage.js\";\nimport { React, Component, Layout, connect, Card, Row, Col, Modal } from \"../../global\";\nimport PublicHeader from \"../../components/public/header/PublicHeader\";\nimport INGREDIENT from \"../../redux/actions/public/ingredientAction\";\nimport OORDER from \"../../redux/actions/public/ordersAction\";\nimport OrderForm from \"../../components/public/order/form/OrderForm\";\nconst {\n  Footer,\n  Content\n} = Layout;\n\nclass HomePage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.clear = () => {};\n\n    this.createTimeToMakePizza = time => {\n      let seconds = time / 1000.0;\n      let decPart = (seconds + \"\").split(\".\")[1];\n      return decPart;\n    };\n\n    this.openIngredientCard = data => {\n      console.log('dataaaaaaaaaa', data);\n      let millisec = data.time;\n      let seconds = millisec / 1000.0;\n      console.log('seconds', seconds); //proslediti sekunde za izradu pice\n\n      let decPart = (seconds + \"\").split(\".\")[1];\n      this.setState({\n        isVisibleModal: true,\n        ingredientPizza: data,\n        pizzaName: data.name,\n        pizzaTime: decPart,\n        pizzaPrice: data.price\n      });\n    };\n\n    this.closeIngredientCard = () => {\n      this.setState({\n        isVisibleModal: false\n      });\n    };\n\n    this.state = {\n      isVisibleModal: false,\n      ingredientPizza: \"\",\n      pizzaName: \"\",\n      pizzaTime: \"\",\n      pizzaPrice: \"\"\n    };\n  }\n\n  render() {\n    if (this.props.ingredient) {\n      const {\n        isVisibleModal,\n        ingredientPizza,\n        pizzaName,\n        pizzaTime,\n        pizzaPrice\n      } = this.state;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Layout, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(PublicHeader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Content, {\n        width: 1300,\n        style: {\n          height: \"830px\",\n          textAlign: \"center\",\n          backgroundColor: \"#eeeff1\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        title: \"Place the ingredients on the pizza.\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        style: {\n          padding: \"0.5rem\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }\n      }, this.props.ingredient.map((data, index) => {\n        return /*#__PURE__*/React.createElement(Col, {\n          span: 6,\n          key: index,\n          type: \"primary\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 23\n          }\n        }, /*#__PURE__*/React.createElement(Card, {\n          title: data.name.toUpperCase(),\n          hoverable: true,\n          onClick: () => this.openIngredientCard(data),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 27\n          }\n        }, \"Price : \", data.price + \" $\"), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 27\n          }\n        }, \"Time to make pizza : \", this.createTimeToMakePizza(data.time) + \" min\", \" \")));\n      })))), /*#__PURE__*/React.createElement(Modal, {\n        style: {\n          textAlign: \"center\"\n        },\n        title: \"Pizza to order \" + pizzaName + \" | Time to make: \" + pizzaTime + \"min\" + \" | Price : \" + pizzaPrice + \"$\",\n        visible: isVisibleModal,\n        width: 550,\n        footer: false,\n        centered: true,\n        closable: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(OrderForm, {\n        initalValues: ingredientPizza,\n        closeIngredientCard: this.closeIngredientCard,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(Footer, {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }\n      }, \"Design \\xA92020 Created by Nikola Mrkic\")));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 9\n        }\n      });\n    }\n  }\n\n} // Map State To Props (Redux Store Passes State To Component)\n\n\nconst mapStateToProps = state => {\n  console.log('state 1', state);\n  const fethcSuccess = state.ingredient.success; // Redux Store --> Component\n\n  if (fethcSuccess) {\n    const ingredient = state;\n    return {\n      ingredient: ingredient.ingredient.data\n    };\n  }\n}; // anything returned from this function will end up as props\n\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    getIngredient: dispatch(INGREDIENT.request()),\n    getOrders: dispatch(INGREDIENT.request())\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);","map":{"version":3,"sources":["/home/nikola/projekti/Spartans AI task zadatak/pizza-place-simulator-client/src/pages/public/HomePage.js"],"names":["React","Component","Layout","connect","Card","Row","Col","Modal","PublicHeader","INGREDIENT","OORDER","OrderForm","Footer","Content","HomePage","constructor","props","clear","createTimeToMakePizza","time","seconds","decPart","split","openIngredientCard","data","console","log","millisec","setState","isVisibleModal","ingredientPizza","pizzaName","name","pizzaTime","pizzaPrice","price","closeIngredientCard","state","render","ingredient","height","textAlign","backgroundColor","padding","map","index","toUpperCase","mapStateToProps","fethcSuccess","success","mapDispatchToProps","dispatch","getIngredient","request","getOrders"],"mappings":"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","sourcesContent":["import { React, Component, Layout, connect, Card, Row, Col, Modal } from \"../../global\";\nimport PublicHeader from \"../../components/public/header/PublicHeader\";\nimport INGREDIENT from \"../../redux/actions/public/ingredientAction\";\nimport OORDER from \"../../redux/actions/public/ordersAction\"\nimport OrderForm from \"../../components/public/order/form/OrderForm\";\n\nconst { Footer, Content } = Layout;\n\nclass HomePage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isVisibleModal: false,\n      ingredientPizza: \"\",\n      pizzaName: \"\",\n      pizzaTime: \"\",\n      pizzaPrice: \"\"\n    };\n  }\n\n  clear = () => {\n\n  };\n\n\n  createTimeToMakePizza = (time) => {\n    let seconds = time / 1000.0;\n    let decPart = (seconds + \"\").split(\".\")[1];\n    return decPart\n  };\n\n\n  openIngredientCard = (data) => {\n    console.log('dataaaaaaaaaa', data);\n    let millisec = data.time;\n    let seconds = millisec / 1000.0;\n    console.log('seconds', seconds);\n    //proslediti sekunde za izradu pice\n    let decPart = (seconds + \"\").split(\".\")[1];\n\n    this.setState({\n      isVisibleModal: true,\n      ingredientPizza: data,\n      pizzaName: data.name,\n      pizzaTime: decPart,\n      pizzaPrice: data.price\n\n    })\n  };\n\n  closeIngredientCard = () => {\n    this.setState({\n      isVisibleModal: false\n    })\n\n  };\n\n  render() {\n    if (this.props.ingredient) {\n      const { isVisibleModal, ingredientPizza, pizzaName, pizzaTime, pizzaPrice } = this.state;\n      return (\n        <div >\n          <Layout>\n            <PublicHeader />\n            <Content\n              width={1300}\n              style={{\n                height: \"830px\",\n                textAlign: \"center\",\n                backgroundColor: \"#eeeff1\",\n              }}\n            >\n              <Card title=\"Place the ingredients on the pizza.\" size=\"small\" >\n                <Row style={{\n                  padding: \"0.5rem\",\n\n                }}>\n                  {this.props.ingredient.map((data, index) => {\n                    return (\n                      <Col span={6} key={index} type=\"primary\" >\n                        <Card title={data.name.toUpperCase()} hoverable={true} onClick={() => this.openIngredientCard(data)} >\n                          <p>Price : {data.price + \" $\"}</p>\n                          <p>Time to make pizza : {this.createTimeToMakePizza(data.time) + \" min\"} </p>\n                        </Card>\n                      </Col>\n                    );\n                  })}\n                </Row>\n              </Card>\n            </Content>\n\n            <Modal\n              style={{\n                textAlign: \"center\",\n              }}\n              title={\"Pizza to order \" + pizzaName + \" | Time to make: \" + pizzaTime + \"min\" + \" | Price : \" + pizzaPrice + \"$\"}\n              visible={isVisibleModal}\n              width={550}\n              footer={false}\n              centered={true}\n              closable={false}\n            >\n              <OrderForm initalValues={ingredientPizza} closeIngredientCard={this.closeIngredientCard} />\n            </Modal>\n\n            <Footer style={{ textAlign: \"center\" }}>\n              Design ©2020 Created by Nikola Mrkic\n            </Footer>\n          </Layout>\n        </div>\n      );\n    } else {\n      return (\n        <div></div>\n      )\n    }\n\n  }\n}\n\n// Map State To Props (Redux Store Passes State To Component)\nconst mapStateToProps = (state) => {\n  console.log('state 1', state);\n  const fethcSuccess = state.ingredient.success;\n  // Redux Store --> Component\n  if (fethcSuccess) {\n    const ingredient = state;\n    return {\n      ingredient: ingredient.ingredient.data,\n    };\n  }\n};\n\n// anything returned from this function will end up as props\nfunction mapDispatchToProps(dispatch) {\n  return {\n    getIngredient: dispatch(INGREDIENT.request()),\n    getOrders: dispatch(INGREDIENT.request()),\n\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);"]},"metadata":{},"sourceType":"module"}