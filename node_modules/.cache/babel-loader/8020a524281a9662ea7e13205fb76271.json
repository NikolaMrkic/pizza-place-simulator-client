{"ast":null,"code":"import { USER_ADMIN } from \"../../actions/admin/userAction/userActionTypes\";\nconst initialState = {\n  users: [],\n  currentUser: {},\n  fetching: false,\n  success: false,\n  error: null\n};\nexport default function userAdminReducer(state = initialState, action) {\n  switch (action.type) {\n    case USER_ADMIN.GET:\n      return { ...state,\n        users: action.payload\n      };\n\n    case USER_ADMIN.GET_ONE:\n      return { ...state,\n        currentUser: action.payload.data\n      };\n\n    case USER_ADMIN.RECEIVE:\n      const responseUser = action.payload;\n      const newUsers = [...state.users];\n      newUsers.push(responseUser);\n      return { ...state,\n        users: [...newUsers],\n        fetching: true,\n        success: true,\n        error: null\n      };\n\n    case USER_ADMIN.SAVE:\n      return { ...state\n      };\n\n    case USER_ADMIN.UPDATE:\n    case USER_ADMIN.DELETE:\n    case USER_ADMIN.SUCCESS:\n      return { ...state,\n        users: action.payload.data,\n        fetching: true,\n        success: true,\n        error: null\n      };\n\n    case USER_ADMIN.SUCCESS_ONE:\n      return state.merge({\n        currentUser: action.payload.data\n      });\n\n    case USER_ADMIN.FAILURE:\n      break;\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/home/nikola/projekti/CutApp/hairdressing-front-managment/src/redux/reducers/admin/userReducer.js"],"names":["USER_ADMIN","initialState","users","currentUser","fetching","success","error","userAdminReducer","state","action","type","GET","payload","GET_ONE","data","RECEIVE","responseUser","newUsers","push","SAVE","UPDATE","DELETE","SUCCESS","SUCCESS_ONE","merge","FAILURE"],"mappings":"AAAA,SAASA,UAAT,QAA2B,gDAA3B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,WAAW,EAAE,EAFM;AAGnBC,EAAAA,QAAQ,EAAE,KAHS;AAInBC,EAAAA,OAAO,EAAE,KAJU;AAKnBC,EAAAA,KAAK,EAAE;AALY,CAArB;AAQA,eAAe,SAASC,gBAAT,CAA0BC,KAAK,GAAGP,YAAlC,EAAgDQ,MAAhD,EAAwD;AACrE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,UAAU,CAACW,GAAhB;AACE,aAAO,EACL,GAAGH,KADE;AAELN,QAAAA,KAAK,EAAEO,MAAM,CAACG;AAFT,OAAP;;AAIF,SAAKZ,UAAU,CAACa,OAAhB;AACE,aAAO,EACL,GAAGL,KADE;AAELL,QAAAA,WAAW,EAAEM,MAAM,CAACG,OAAP,CAAeE;AAFvB,OAAP;;AAIF,SAAKd,UAAU,CAACe,OAAhB;AACE,YAAMC,YAAY,GAAGP,MAAM,CAACG,OAA5B;AACA,YAAMK,QAAQ,GAAG,CAAC,GAAGT,KAAK,CAACN,KAAV,CAAjB;AACAe,MAAAA,QAAQ,CAACC,IAAT,CAAcF,YAAd;AACA,aAAO,EACL,GAAGR,KADE;AAELN,QAAAA,KAAK,EAAE,CAAC,GAAGe,QAAJ,CAFF;AAGLb,QAAAA,QAAQ,EAAE,IAHL;AAILC,QAAAA,OAAO,EAAE,IAJJ;AAKLC,QAAAA,KAAK,EAAE;AALF,OAAP;;AAOF,SAAKN,UAAU,CAACmB,IAAhB;AACE,aAAO,EACL,GAAGX;AADE,OAAP;;AAGF,SAAKR,UAAU,CAACoB,MAAhB;AACA,SAAKpB,UAAU,CAACqB,MAAhB;AACA,SAAKrB,UAAU,CAACsB,OAAhB;AACE,aAAO,EACL,GAAGd,KADE;AAELN,QAAAA,KAAK,EAAEO,MAAM,CAACG,OAAP,CAAeE,IAFjB;AAGLV,QAAAA,QAAQ,EAAE,IAHL;AAILC,QAAAA,OAAO,EAAE,IAJJ;AAKLC,QAAAA,KAAK,EAAE;AALF,OAAP;;AAOF,SAAKN,UAAU,CAACuB,WAAhB;AACE,aAAOf,KAAK,CAACgB,KAAN,CAAY;AAAErB,QAAAA,WAAW,EAAEM,MAAM,CAACG,OAAP,CAAeE;AAA9B,OAAZ,CAAP;;AACF,SAAKd,UAAU,CAACyB,OAAhB;AACE;;AACF;AACE,aAAO,EACL,GAAGjB;AADE,OAAP;AAzCJ;AA6CD","sourcesContent":["import { USER_ADMIN } from \"../../actions/admin/userAction/userActionTypes\";\n\nconst initialState = {\n  users: [],\n  currentUser: {},\n  fetching: false,\n  success: false,\n  error: null,\n};\n\nexport default function userAdminReducer(state = initialState, action) {\n  switch (action.type) {\n    case USER_ADMIN.GET:\n      return {\n        ...state,\n        users: action.payload,\n      };\n    case USER_ADMIN.GET_ONE:\n      return {\n        ...state,\n        currentUser: action.payload.data,\n      };\n    case USER_ADMIN.RECEIVE:\n      const responseUser = action.payload;\n      const newUsers = [...state.users];\n      newUsers.push(responseUser);\n      return {\n        ...state,\n        users: [...newUsers],\n        fetching: true,\n        success: true,\n        error: null,\n      };\n    case USER_ADMIN.SAVE:\n      return {\n        ...state,\n      };\n    case USER_ADMIN.UPDATE:\n    case USER_ADMIN.DELETE:\n    case USER_ADMIN.SUCCESS:\n      return {\n        ...state,\n        users: action.payload.data,\n        fetching: true,\n        success: true,\n        error: null,\n      };\n    case USER_ADMIN.SUCCESS_ONE:\n      return state.merge({ currentUser: action.payload.data });\n    case USER_ADMIN.FAILURE:\n      break;\n    default:\n      return {\n        ...state,\n      };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}