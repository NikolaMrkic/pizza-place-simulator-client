{"ast":null,"code":"import { put, call, takeLatest, all } from \"redux-saga/effects\";\nimport DataUtils from \"../../../DataUtils\";\nimport { orderAction } from \"../../actions/public/ordersAction\";\nimport { ORDER } from \"../../actions/public/ordersAction/ordersActionTypes\";\n\nfunction* handleGetOrders() {\n  console.log(\"DOVLACIMMMMMMMMMMMMMMMMMMMMMM ORDEREEE\");\n\n  try {\n    const {\n      data\n    } = yield call(DataUtils.get, `/orders`);\n    console.log('data iz sage', data);\n    console.log(\"data from saga\", data);\n    yield put(orderAction.success({\n      data\n    }));\n  } catch (e) {\n    yield put(orderAction.failure({\n      error: { ...e\n      }\n    }));\n  }\n}\n\nfunction* handlePostOrder(action) {\n  const order = action.payload;\n\n  try {\n    const response = yield call(DataUtils.post, `/create-order`, order);\n    const orderResponse = response.data;\n    console.log(\"orderResponse\", orderResponse);\n    yield put(orderAction.recive({}));\n  } catch (e) {\n    yield put(orderAction.failure({\n      error: { ...e\n      }\n    }));\n  }\n}\n\nexport function* watchAllOrdersSagas() {\n  yield all([takeLatest(ORDER.GET, handleGetOrders), takeLatest(ORDER.SAVE, handlePostOrder)]);\n}\nexport default watchAllOrdersSagas;","map":{"version":3,"sources":["/home/nikola/projekti/Spartans AI task zadatak/pizza-place-simulator-client/src/redux/sagas/public/orderSaga.js"],"names":["put","call","takeLatest","all","DataUtils","orderAction","ORDER","handleGetOrders","console","log","data","get","success","e","failure","error","handlePostOrder","action","order","payload","response","post","orderResponse","recive","watchAllOrdersSagas","GET","SAVE"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,SAASC,WAAT,QAA4B,mCAA5B;AACA,SAASC,KAAT,QAAsB,qDAAtB;;AAEA,UAAUC,eAAV,GAA4B;AACxBC,EAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;;AACA,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMT,IAAI,CAACG,SAAS,CAACO,GAAX,EAAiB,SAAjB,CAA3B;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BC,IAA5B;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BC,IAA9B;AACA,UAAMV,GAAG,CAACK,WAAW,CAACO,OAAZ,CAAoB;AAAEF,MAAAA;AAAF,KAApB,CAAD,CAAT;AACH,GALD,CAKE,OAAOG,CAAP,EAAU;AACR,UAAMb,GAAG,CAACK,WAAW,CAACS,OAAZ,CAAoB;AAAEC,MAAAA,KAAK,EAAE,EAAE,GAAGF;AAAL;AAAT,KAApB,CAAD,CAAT;AACH;AACJ;;AAED,UAAUG,eAAV,CAA0BC,MAA1B,EAAkC;AAC9B,QAAMC,KAAK,GAAGD,MAAM,CAACE,OAArB;;AACA,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMnB,IAAI,CAACG,SAAS,CAACiB,IAAX,EAAkB,eAAlB,EAAkCH,KAAlC,CAA3B;AACA,UAAMI,aAAa,GAAGF,QAAQ,CAACV,IAA/B;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6Ba,aAA7B;AACA,UAAMtB,GAAG,CAACK,WAAW,CAACkB,MAAZ,CAAmB,EAAnB,CAAD,CAAT;AACH,GALD,CAKE,OAAOV,CAAP,EAAU;AACR,UAAMb,GAAG,CAACK,WAAW,CAACS,OAAZ,CAAoB;AAAEC,MAAAA,KAAK,EAAE,EAAE,GAAGF;AAAL;AAAT,KAApB,CAAD,CAAT;AACH;AACJ;;AAED,OAAO,UAAUW,mBAAV,GAAgC;AACnC,QAAMrB,GAAG,CAAC,CACND,UAAU,CAACI,KAAK,CAACmB,GAAP,EAAYlB,eAAZ,CADJ,EAENL,UAAU,CAACI,KAAK,CAACoB,IAAP,EAAaV,eAAb,CAFJ,CAAD,CAAT;AAIH;AAED,eAAeQ,mBAAf","sourcesContent":["import { put, call, takeLatest, all } from \"redux-saga/effects\";\nimport DataUtils from \"../../../DataUtils\";\nimport { orderAction } from \"../../actions/public/ordersAction\";\nimport { ORDER } from \"../../actions/public/ordersAction/ordersActionTypes\";\n\nfunction* handleGetOrders() {\n    console.log(\"DOVLACIMMMMMMMMMMMMMMMMMMMMMM ORDEREEE\");\n    try {\n        const { data } = yield call(DataUtils.get, `/orders`);\n        console.log('data iz sage', data);\n        console.log(\"data from saga\", data);\n        yield put(orderAction.success({ data }));\n    } catch (e) {\n        yield put(orderAction.failure({ error: { ...e } }));\n    }\n}\n\nfunction* handlePostOrder(action) {\n    const order = action.payload;\n    try {\n        const response = yield call(DataUtils.post, `/create-order`, order);\n        const orderResponse = response.data;\n        console.log(\"orderResponse\", orderResponse)\n        yield put(orderAction.recive({}));\n    } catch (e) {\n        yield put(orderAction.failure({ error: { ...e } }));\n    }\n}\n\nexport function* watchAllOrdersSagas() {\n    yield all([\n        takeLatest(ORDER.GET, handleGetOrders),\n        takeLatest(ORDER.SAVE, handlePostOrder)],\n    );\n}\n\nexport default watchAllOrdersSagas;\n"]},"metadata":{},"sourceType":"module"}