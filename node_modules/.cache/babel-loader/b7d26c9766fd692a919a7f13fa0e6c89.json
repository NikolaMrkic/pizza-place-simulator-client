{"ast":null,"code":"import { fromJS } from \"immutable\";\nimport { compose, createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware, { END } from \"redux-saga\";\nimport rootReducer from \"./reducers/index\";\nconst sagaMiddleware = createSagaMiddleware();\n\nconst configureStore = (initialState = {}, history) => {\n  const composeEnhancers = process.env.NODE_ENV !== \"production\" && typeof window === \"object\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n    shouldHotReload: false\n  }) : compose;\n  const middlewares = [sagaMiddleware];\n  const enhancers = [applyMiddleware(...middlewares)];\n  const store = createStore(rootReducer(), fromJS(initialState), composeEnhancers(...enhancers));\n  store.runSaga = sagaMiddleware.run;\n  store.asyncReducers = {};\n\n  store.close = () => store.dispatch(END);\n\n  if (module.hot) {\n    // Enable webpack hot module replacement for reducers\n    module.hot.accept(\"./reducers\", () => {\n      import(\"./reducers\").then(reducerModule => {\n        const createReducers = reducerModule.default;\n        const nextReducers = createReducers(store.asyncReducers);\n        store.replaceReducer(nextReducers);\n      });\n    });\n  }\n\n  return store;\n};\n\nexport default configureStore;","map":{"version":3,"sources":["/home/nikola/projekti/CutApp/hairdressing-front-managment/src/redux/store.js"],"names":["fromJS","compose","createStore","applyMiddleware","createSagaMiddleware","END","rootReducer","sagaMiddleware","configureStore","initialState","history","composeEnhancers","process","env","NODE_ENV","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","shouldHotReload","middlewares","enhancers","store","runSaga","run","asyncReducers","close","dispatch","module","hot","accept","then","reducerModule","createReducers","default","nextReducers","replaceReducer"],"mappings":"AAAA,SAASA,MAAT,QAAuB,WAAvB;AACA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,OAAOC,oBAAP,IAA+BC,GAA/B,QAA0C,YAA1C;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AAEA,MAAMC,cAAc,GAAGH,oBAAoB,EAA3C;;AAEA,MAAMI,cAAc,GAAG,CAACC,YAAY,GAAG,EAAhB,EAAoBC,OAApB,KAAgC;AACrD,QAAMC,gBAAgB,GACpBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IACA,OAAOC,MAAP,KAAkB,QADlB,IAEAA,MAAM,CAACC,oCAFP,GAGID,MAAM,CAACC,oCAAP,CAA4C;AAC1CC,IAAAA,eAAe,EAAE;AADyB,GAA5C,CAHJ,GAMIhB,OAPN;AASA,QAAMiB,WAAW,GAAG,CAACX,cAAD,CAApB;AAEA,QAAMY,SAAS,GAAG,CAAChB,eAAe,CAAC,GAAGe,WAAJ,CAAhB,CAAlB;AAEA,QAAME,KAAK,GAAGlB,WAAW,CACvBI,WAAW,EADY,EAEvBN,MAAM,CAACS,YAAD,CAFiB,EAGvBE,gBAAgB,CAAC,GAAGQ,SAAJ,CAHO,CAAzB;AAMAC,EAAAA,KAAK,CAACC,OAAN,GAAgBd,cAAc,CAACe,GAA/B;AACAF,EAAAA,KAAK,CAACG,aAAN,GAAsB,EAAtB;;AACAH,EAAAA,KAAK,CAACI,KAAN,GAAc,MAAMJ,KAAK,CAACK,QAAN,CAAepB,GAAf,CAApB;;AAEA,MAAIqB,MAAM,CAACC,GAAX,EAAgB;AACd;AACAD,IAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,YAAlB,EAAgC,MAAM;AACpC,aAAO,YAAP,EAAqBC,IAArB,CAA2BC,aAAD,IAAmB;AAC3C,cAAMC,cAAc,GAAGD,aAAa,CAACE,OAArC;AACA,cAAMC,YAAY,GAAGF,cAAc,CAACX,KAAK,CAACG,aAAP,CAAnC;AACAH,QAAAA,KAAK,CAACc,cAAN,CAAqBD,YAArB;AACD,OAJD;AAKD,KAND;AAOD;;AAED,SAAOb,KAAP;AACD,CApCD;;AAsCA,eAAeZ,cAAf","sourcesContent":["import { fromJS } from \"immutable\";\nimport { compose, createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware, { END } from \"redux-saga\";\nimport rootReducer from \"./reducers/index\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst configureStore = (initialState = {}, history) => {\n  const composeEnhancers =\n    process.env.NODE_ENV !== \"production\" &&\n    typeof window === \"object\" &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n          shouldHotReload: false,\n        })\n      : compose;\n\n  const middlewares = [sagaMiddleware];\n\n  const enhancers = [applyMiddleware(...middlewares)];\n\n  const store = createStore(\n    rootReducer(),\n    fromJS(initialState),\n    composeEnhancers(...enhancers)\n  );\n\n  store.runSaga = sagaMiddleware.run;\n  store.asyncReducers = {};\n  store.close = () => store.dispatch(END);\n\n  if (module.hot) {\n    // Enable webpack hot module replacement for reducers\n    module.hot.accept(\"./reducers\", () => {\n      import(\"./reducers\").then((reducerModule) => {\n        const createReducers = reducerModule.default;\n        const nextReducers = createReducers(store.asyncReducers);\n        store.replaceReducer(nextReducers);\n      });\n    });\n  }\n\n  return store;\n};\n\nexport default configureStore;\n"]},"metadata":{},"sourceType":"module"}