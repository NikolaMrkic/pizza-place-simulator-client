{"ast":null,"code":"import { ORDER } from \"../../actions/public/ordersAction/ordersActionTypes\";\nconst initialState = {\n  orders: {\n    test: ''\n  }\n};\nexport default function orderReducer(state = initialState, action) {\n  switch (action.type) {\n    case ORDER.RECEIVE:\n      return {\n        // ...state,\n        // data: [...state.data.orders, action.payload.orderResponse],\n        // success: true,\n        // errorMessage: null,\n        orders: {\n          test: 'nikola'\n        }\n      };\n\n    case ORDER.GET:\n      return { ...state\n      };\n\n    case ORDER.SUCCESS:\n      return { ...state,\n        data: action.payload.data.orders,\n        fetching: true,\n        success: true,\n        error: null\n      };\n\n    case ORDER.FAILURE:\n      break;\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/home/nikola/projekti/Spartans AI task zadatak/pizza-place-simulator-client/src/redux/reducers/public/orderReducer.js"],"names":["ORDER","initialState","orders","test","orderReducer","state","action","type","RECEIVE","GET","SUCCESS","data","payload","fetching","success","error","FAILURE"],"mappings":"AAAA,SAASA,KAAT,QAAsB,qDAAtB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE;AACJC,IAAAA,IAAI,EAAE;AADF;AADS,CAArB;AAMA,eAAe,SAASC,YAAT,CAAsBC,KAAK,GAAGJ,YAA9B,EAA4CK,MAA5C,EAAoD;AAC/D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,KAAK,CAACQ,OAAX;AACI,aAAO;AACH;AACA;AACA;AACA;AACAN,QAAAA,MAAM,EAAE;AACJC,UAAAA,IAAI,EAAE;AADF;AALL,OAAP;;AASJ,SAAKH,KAAK,CAACS,GAAX;AACI,aAAO,EACH,GAAGJ;AADA,OAAP;;AAGJ,SAAKL,KAAK,CAACU,OAAX;AACI,aAAO,EACH,GAAGL,KADA;AAEHM,QAAAA,IAAI,EAAEL,MAAM,CAACM,OAAP,CAAeD,IAAf,CAAoBT,MAFvB;AAGHW,QAAAA,QAAQ,EAAE,IAHP;AAIHC,QAAAA,OAAO,EAAE,IAJN;AAKHC,QAAAA,KAAK,EAAE;AALJ,OAAP;;AAOJ,SAAKf,KAAK,CAACgB,OAAX;AACI;;AACJ;AACI,aAAO,EACH,GAAGX;AADA,OAAP;AA1BR;AA8BH","sourcesContent":["import { ORDER } from \"../../actions/public/ordersAction/ordersActionTypes\";\n\nconst initialState = {\n    orders: {\n        test: ''\n    }\n};\n\nexport default function orderReducer(state = initialState, action) {\n    switch (action.type) {\n        case ORDER.RECEIVE:\n            return {\n                // ...state,\n                // data: [...state.data.orders, action.payload.orderResponse],\n                // success: true,\n                // errorMessage: null,\n                orders: {\n                    test: 'nikola'\n                }\n            };\n        case ORDER.GET:\n            return {\n                ...state,\n            };\n        case ORDER.SUCCESS:\n            return {\n                ...state,\n                data: action.payload.data.orders,\n                fetching: true,\n                success: true,\n                error: null,\n            };\n        case ORDER.FAILURE:\n            break;\n        default:\n            return {\n                ...state,\n            };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}