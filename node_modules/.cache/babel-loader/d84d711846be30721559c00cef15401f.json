{"ast":null,"code":"import { put, call, takeLatest, all } from \"redux-saga/effects\";\nimport DataUtils from \"../../../DataUtils\";\nimport { ingredientAction } from \"../../actions/public/ingredientAction/\";\nimport { INGREDIENT } from \"../../actions/public/ingredientAction/ingredientActionTypes\";\n\nfunction* handleGetIngredient() {\n  try {\n    const {\n      data\n    } = yield call(DataUtils.get, `/public/ingredients`);\n    yield put(ingredientAction.success({\n      data\n    }));\n  } catch (e) {\n    yield put(ingredientAction.failure({\n      error: { ...e\n      }\n    }));\n  }\n}\n\nexport function* watchAllIngredientSagas() {\n  yield all([takeLatest(INGREDIENT.GET, handleGetIngredient)]);\n}\nexport default watchAllIngredientSagas;","map":{"version":3,"sources":["/home/nikola/projekti/Spartans AI task zadatak/pizza-place-simulator-client/src/redux/sagas/public/ingredientSaga.js"],"names":["put","call","takeLatest","all","DataUtils","ingredientAction","INGREDIENT","handleGetIngredient","data","get","success","e","failure","error","watchAllIngredientSagas","GET"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,SAASC,gBAAT,QAAiC,wCAAjC;AACA,SAASC,UAAT,QAA2B,6DAA3B;;AAEA,UAAUC,mBAAV,GAAgC;AAC9B,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMP,IAAI,CAACG,SAAS,CAACK,GAAX,EAAiB,qBAAjB,CAA3B;AACA,UAAMT,GAAG,CAACK,gBAAgB,CAACK,OAAjB,CAAyB;AAAEF,MAAAA;AAAF,KAAzB,CAAD,CAAT;AACD,GAHD,CAGE,OAAOG,CAAP,EAAU;AACV,UAAMX,GAAG,CAACK,gBAAgB,CAACO,OAAjB,CAAyB;AAAEC,MAAAA,KAAK,EAAE,EAAE,GAAGF;AAAL;AAAT,KAAzB,CAAD,CAAT;AACD;AACF;;AAED,OAAO,UAAUG,uBAAV,GAAoC;AACzC,QAAMX,GAAG,CACP,CAACD,UAAU,CAACI,UAAU,CAACS,GAAZ,EAAiBR,mBAAjB,CAAX,CADO,CAAT;AAGD;AAED,eAAeO,uBAAf","sourcesContent":["import { put, call, takeLatest, all } from \"redux-saga/effects\";\nimport DataUtils from \"../../../DataUtils\";\nimport { ingredientAction } from \"../../actions/public/ingredientAction/\";\nimport { INGREDIENT } from \"../../actions/public/ingredientAction/ingredientActionTypes\";\n\nfunction* handleGetIngredient() {\n  try {\n    const { data } = yield call(DataUtils.get, `/public/ingredients`);\n    yield put(ingredientAction.success({ data }));\n  } catch (e) {\n    yield put(ingredientAction.failure({ error: { ...e } }));\n  }\n}\n\nexport function* watchAllIngredientSagas() {\n  yield all(\n    [takeLatest(INGREDIENT.GET, handleGetIngredient)],\n  );\n}\n\nexport default watchAllIngredientSagas;\n"]},"metadata":{},"sourceType":"module"}