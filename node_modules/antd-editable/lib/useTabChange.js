"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = require("react");

var useTabChange = function useTabChange(curCell, setCurCell, cacheSource, dataIndexMap) {
  (0, _react.useEffect)(function () {
    // 计算下一行的index
    function getNextRowIndex(preRowIndex, dataSource) {
      var length = dataIndexMap.length;
      var i = preRowIndex + 1;

      while (dataSource[i] && dataSource[i].editable === false) {
        i++;
      }

      return length > i ? i : preRowIndex;
    } // 被 window 监听的键盘事件


    function handleTabChange(e) {
      // 只在按 tab 键并且当前有被激活的单元格才执行
      if (e.keyCode === 9 && curCell !== null) {
        e.preventDefault();
        var rowIndex = curCell.rowIndex,
            dataIndex = curCell.dataIndex;
        var dataIndexMapItem = dataIndexMap[rowIndex];
        var index = dataIndexMapItem.indexOf(dataIndex); // 是否需要换行

        var changeRow = index === dataIndexMapItem.length - 1;
        var nextRow = getNextRowIndex(rowIndex, cacheSource);
        var canChangeRow = cacheSource.length - 1 >= rowIndex + 1 && nextRow !== rowIndex;
        var nextCell; // 判断切换条件

        if (changeRow && !canChangeRow) {
          nextCell = null;
        } else {
          nextCell = {
            rowIndex: changeRow ? nextRow : rowIndex,
            dataIndex: changeRow ? dataIndexMap[nextRow][0] : dataIndexMapItem[index + 1]
          };
        }

        setCurCell(nextCell);
      }
    } // 绑定


    window.addEventListener('keydown', handleTabChange); // 解除

    return function () {
      window.removeEventListener('keydown', handleTabChange);
    };
  });
};

var _default = useTabChange;
exports["default"] = _default;