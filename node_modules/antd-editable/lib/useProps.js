"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = require("react");

var _immer = _interopRequireDefault(require("immer"));

var _useTabChange = _interopRequireDefault(require("./useTabChange"));

var _computedEditColumns = _interopRequireDefault(require("./computedEditColumns"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useProps = function useProps(dataSource, columns, onCellChange, form) {
  // 当前被激活的单元格，默认为null
  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      curCell = _useState2[0],
      setCurCell = _useState2[1]; // 内部维护的 dataSource


  var _useDataSource = useDataSource(dataSource, form),
      cacheSource = _useDataSource.cacheSource,
      setCacheSource = _useDataSource.setCacheSource; // 用 ref 记录每次被更新的单元格


  var beforeCell = (0, _react.useRef)(null); // 使用 useMemo 缓存 editColumns 和 dataIndexMap。 只在 columns 和 curCell 更改后更新

  var _useMemo = (0, _react.useMemo)(function () {
    return (0, _computedEditColumns["default"])(columns, curCell, handleSetCurCell, form);
  }, [columns, curCell]),
      editColumns = _useMemo.editColumns,
      dataIndexMap = _useMemo.dataIndexMap;

  var hasError = curCell && form.getFieldError("".concat(curCell.dataIndex, "-").concat(curCell.rowIndex)); // tab键切换

  (0, _useTabChange["default"])(curCell, handleSetCurCell, cacheSource, dataIndexMap); // 每当 curCell 更变后，更改缓存的 dataSource 。 并且执行 onCellChange

  (0, _react.useEffect)(function () {
    if (beforeCell && beforeCell.current) {
      var _beforeCell$current = beforeCell.current,
          dataIndex = _beforeCell$current.dataIndex,
          rowIndex = _beforeCell$current.rowIndex;
      var value = form.getFieldValue("".concat(dataIndex, "-").concat(rowIndex));
      var nextSource = (0, _immer["default"])(cacheSource, function (draft) {
        draft[rowIndex][dataIndex] = value;
      });
      setCacheSource(nextSource);
      onCellChange(nextSource, value, cacheSource[rowIndex][dataIndex], rowIndex, dataIndex);
    } // 重新设置 Ref 记录的值


    beforeCell.current = curCell;
  }, [curCell]);

  function handleSetCurCell(nextCell) {
    //  当前单元格有错误的话则禁止切换
    if (!hasError) {
      setCurCell(nextCell);
    }
  }

  return {
    cacheSource: cacheSource,
    editColumns: editColumns,
    hasError: hasError
  };
};

var useDataSource = function useDataSource(dataSource, form) {
  var _useState3 = (0, _react.useState)(dataSource),
      _useState4 = _slicedToArray(_useState3, 2),
      cacheSource = _useState4[0],
      setCacheSource = _useState4[1]; // 外部 dataSource 更新了同步更新缓存的 dataSource 和 表单域的值


  (0, _react.useEffect)(function () {
    setCacheSource(dataSource);
    form.resetFields();
  }, [dataSource]);
  return {
    cacheSource: cacheSource,
    setCacheSource: setCacheSource
  };
};

var _default = useProps;
exports["default"] = _default;