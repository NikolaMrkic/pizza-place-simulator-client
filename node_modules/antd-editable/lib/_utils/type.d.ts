/// <reference types="react" />
export declare type Omit<T, K> = Pick<T, Exclude<keyof T, K>>;
export declare const tuple: <T extends string[]>(...args: T) => T;
export declare const tupleNum: <T extends number[]>(...args: T) => T;
export declare const withDefaultProps: <P extends object, DP extends Partial<P> = Partial<P>>(defaultProps: DP, Cmp: import("react").ComponentType<P>) => import("react").ComponentType<Partial<DP> & Required<Pick<P, Exclude<keyof P, keyof DP>>>>;
export declare type Weaken<T, K extends keyof T> = {
    [P in keyof T]: P extends K ? any : T[P];
};
