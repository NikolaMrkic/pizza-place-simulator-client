"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

require("antd/es/input/style/css");

var _input = _interopRequireDefault(require("antd/es/input"));

require("antd/es/select/style/css");

var _select = _interopRequireDefault(require("antd/es/select"));

require("antd/es/form/style/css");

var _form = _interopRequireDefault(require("antd/es/form"));

var _react = _interopRequireWildcard(require("react"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var Item = _form["default"].Item;
var Option = _select["default"].Option;

var Cell = function Cell(_ref) {
  var form = _ref.form,
      dataIndex = _ref.dataIndex,
      rowIndex = _ref.rowIndex,
      curCell = _ref.curCell,
      onSetCurCell = _ref.onSetCurCell,
      initialValue = _ref.initialValue,
      _ref$rules = _ref.rules,
      rules = _ref$rules === void 0 ? [] : _ref$rules,
      isSelect = _ref.isSelect;
  // 是否处于可编辑状态
  var isEditing = !!curCell && curCell.dataIndex === dataIndex && curCell.rowIndex === rowIndex; // input的Ref，用于激活后的focus

  var inputRef = useFocus(isEditing); // 将当前的Cell激活

  function handleSetCurCell() {
    if (curCell) {
      form.validateFields(["".concat(curCell.dataIndex, "-").concat(curCell.rowIndex)], function (err) {
        if (!err) onSetCurCell({
          dataIndex: dataIndex,
          rowIndex: rowIndex
        });
      });
    } else {
      onSetCurCell({
        dataIndex: dataIndex,
        rowIndex: rowIndex
      });
    }
  } // 保存值到表单域里


  function handleSave() {
    form.validateFields(["".concat(dataIndex, "-").concat(rowIndex)], function (err) {
      if (!err) {
        onSetCurCell(null);
      }
    });
  } // 静态值


  var stockCell = _react["default"].createElement("div", {
    onClick: handleSetCurCell,
    className: "editable-cell-value-wrap"
  }, Array.isArray(isSelect) ? function foo() {
    var target = isSelect.find(function (_ref2) {
      var value = _ref2.value;
      return value === initialValue;
    });
    return target ? target.label : initialValue;
  }() : initialValue); // 获取控件


  var getFormItem = function getFormItem() {
    if (isSelect) {
      return _react["default"].createElement(_select["default"], {
        onChange: handleSave,
        ref: inputRef,
        onBlur: handleSave,
        style: {
          width: '100%'
        }
      }, Array.isArray(isSelect) && isSelect.map(function (item, index) {
        return _react["default"].createElement(Option, {
          key: index,
          value: item.value
        }, item.label);
      }));
    } else {
      return _react["default"].createElement(_input["default"], {
        ref: inputRef,
        onPressEnter: handleSave,
        onBlur: handleSave
      });
    }
  };

  var rulesWithCellInfo = rules.map(function (item) {
    var _validator = item.validator;
    return _validator ? _extends({}, item, {
      validator: function validator(rule, value, callback) {
        _validator(rule, value, callback, curCell);
      }
    }) : item;
  });
  return _react["default"].createElement("div", {
    style: {
      textAlign: 'left'
    }
  }, _react["default"].createElement(Item, null, form.getFieldDecorator("".concat(dataIndex, "-").concat(rowIndex), {
    initialValue: initialValue === '--' ? '' : initialValue,
    rules: rulesWithCellInfo
  })(isEditing ? getFormItem() : stockCell)));
};

var useFocus = function useFocus(isEditing) {
  var inputRef = _react["default"].createRef();

  (0, _react.useEffect)(function () {
    if (isEditing) {
      if (inputRef.current) inputRef.current.focus();
    }
  }, [isEditing]);
  return inputRef;
};

var _default = Cell;
exports["default"] = _default;