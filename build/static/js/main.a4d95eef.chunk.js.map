{"version":3,"sources":["DataUtils.js","components/PublicComponents/LogInComponent/LogIn.js","components/PublicComponents/HeaderComponent/PublicHeader.js","utils/index.js","redux/actions/admin/userAction/userActionTypes.js","redux/actions/admin/userAction/index.js","pages/public/HomePage.js","components/AdminComponents/HeaderComponent/AdminHeader.js","components/AdminComponents/forms/user/UserForm.js","helpers/DashboardRoutes.js","components/AdminComponents/tables/UsersTable.js","pages/admin/AdminPage.js","pages/admin/TestPage.js","App.js","serviceWorker.js","redux/sagas/admin/userSagas.js","redux/sagas/index.js","redux/reducers/admin/userReducer.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["clientAuthentication","btoa","clientID","api","axios","create","baseURL","get","url","a","options","result","then","res","err","error","undefined","response","dataAndStatusForGet","data","status","post","dataAndStatusForPost","put","dataAndStatusForUpdate","del","delete","dataAndStatusForDelete","LogIn","fakeAuth","isAuthenticated","authenticate","cb","setTimeout","signout","from","useLocation","state","pathname","history","useHistory","name","className","initialValues","remember","onFinish","values","console","log","Item","rules","required","message","prefix","UserOutlined","placeholder","LockOutlined","type","valuePropName","noStyle","onClick","replace","PublicHeader","useState","isVisibleModal","setIsVisibleModal","extra","danger","title","visible","onOk","onCancel","width","createAction","payload","USER_ADMIN","base","actions","reduce","acc","createActionTypes","userAdminAction","request","GET","fetching","success","requestOne","id","GET_ONE","success_one","SUCCESS_ONE","save","SAVE","PUT","DELETE","SUCCESS","failure","FAILURE","Footer","Layout","Content","homePage","this","props","style","height","textAlign","backgroundColor","Component","connect","userAdminState","adminUsers","dispatch","getAdminUsersAction","AdminHeader","user","color","avatar","src","onBack","push","size","subTitle","onSubmit","formProps","alert","JSON","stringify","UserForm","handleSubmit","Field","component","input","reduxForm","form","validate","errors","firstName","lastName","DashboardRoutes","path","link","menuName","curentUser","currentUser","useCurentUser","setCurentUser","dataSource","map","index","key","userId","userName","email","phone","address","columns","dataIndex","render","text","handler","userForEdit","tableData","_","orderBy","pagination","pageSize","Sider","SubMenu","Menu","AdminPage","collapsed","onCollapse","setState","minHeight","collapsible","theme","defaultSelectedKeys","mode","dashboardRoutes","icon","to","margin","route","exact","TestPage","PrivateRoute","children","rest","location","Boolean","window","hostname","match","handleGetAdminUsers","handleGetOne","watchAllUserAdminSagas","call","DataUtils","action","all","takeLatest","rootSaga","fork","initialState","userAdminReducer","RECEIVE","UPDATE","merge","createReducer","asyncReducers","combineReducers","formReducer","sagaMiddleware","createSagaMiddleware","configureStore","composeEnhancers","compose","middlewares","enhancers","applyMiddleware","store","createStore","rootReducer","fromJS","runSaga","run","close","END","createBrowserHistory","HomePage","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a4d95eef.chunk.js","sourcesContent":["import axios from \"axios\";\nconst clientID = \"service-account-1\";\nconst clientSecret = \"service-account-1-secret\";\nconst authString = clientID + \":\" + clientSecret;\nconst clientAuthentication = `Basic ${btoa(authString)}`;\n//const apiUrl = API_URL;\n\nconst api = axios.create({\n  //baseURL: apiUrl\n  baseURL: `http://127.0.0.1:8090/`\n});\n\nconst get = async function(url, options = {}) {\n  let result = [];\n  let error;\n  await api.get(url, options).then(\n    res => (result = res),\n    err => (error = err)\n  );\n\n  if (error !== undefined) {\n    throw error.response;\n  }\n  const dataAndStatusForGet = { data: result.data, status: result.status };\n  return dataAndStatusForGet;\n};\n\nconst post = async function(url, data, options = {}) {\n  let result = [];\n  await api.post(url, data, options).then(res => (result = res));\n  const dataAndStatusForPost = { data: result.data, status: result.status };\n  // return result.data\n  return dataAndStatusForPost;\n};\n\nconst put = async function(url, data, options = {}) {\n  let result = [];\n  await api.put(url, data, options).then(res => (result = res));\n  const dataAndStatusForUpdate = { data: result.data, status: result.status };\n  // return result.data\n  return dataAndStatusForUpdate;\n};\n\nconst del = async function(url, options = {}) {\n  var result = [];\n  await api.delete(url, options).then(res => (result = res));\n  const dataAndStatusForDelete = { data: result.data, status: result.status };\n\n  return dataAndStatusForDelete;\n  // return result.data\n};\n\nexport default {\n  get,\n  post,\n  put,\n  del,\n  clientAuthentication\n};\n","import {\n  React,\n  Checkbox,\n  Form,\n  Input,\n  Button,\n  Link,\n  useHistory,\n  useLocation,\n  UserOutlined,\n  LockOutlined,\n} from \"../../../global\";\n\nconst LogIn = () => {\n  const fakeAuth = {\n    isAuthenticated: false,\n    authenticate(cb) {\n      fakeAuth.isAuthenticated = true;\n      setTimeout(cb, 100); // fake async\n    },\n    signout(cb) {\n      fakeAuth.isAuthenticated = false;\n      setTimeout(cb, 100);\n    },\n  };\n  let location = useLocation();\n  let { from } = location.state || { from: { pathname: \"/admin\" } };\n\n  let history = useHistory();\n  let login = () => {\n    fakeAuth.authenticate(() => {\n      console.log(fakeAuth.isAuthenticated);\n\n      history.replace(from);\n    });\n  };\n\n  const onFinish = (values) => {\n    console.log(\"Received values of form: \", values);\n  };\n\n  return (\n    <div>\n      <p>Login to {from.pathname} page</p>\n\n      <Form\n        name=\"normal_login\"\n        className=\"login-form\"\n        initialValues={{\n          remember: true,\n        }}\n        onFinish={onFinish}\n      >\n        <Form.Item\n          name=\"username\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input your Username!\",\n            },\n          ]}\n        >\n          <Input\n            prefix={<UserOutlined className=\"site-form-item-icon\" />}\n            placeholder=\"Username\"\n          />\n        </Form.Item>\n        <Form.Item\n          name=\"password\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input your Password!\",\n            },\n          ]}\n        >\n          <Input\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\n            type=\"password\"\n            placeholder=\"Password\"\n          />\n        </Form.Item>\n        <Form.Item>\n          <Form.Item name=\"remember\" valuePropName=\"checked\" noStyle>\n            <Checkbox>Remember me</Checkbox>\n          </Form.Item>\n\n          <Link className=\"login-form-forgot\"> Forgot password</Link>\n        </Form.Item>\n\n        <Form.Item>\n          {/* <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            className=\"login-form-button\"\n          >\n            Log in\n          </Button> */}\n          <Button onClick={login} type=\"primary\">\n            Log in\n          </Button>\n          Or <Link>register now!</Link>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\nexport default LogIn;\n","import { React, useState, PageHeader, Button, Modal } from \"../../../global\";\nimport LogIn from \"../LogInComponent/LogIn\";\n\nconst PublicHeader = () => {\n  const [isVisibleModal, setIsVisibleModal] = useState(false);\n\n  const showModal = () => {\n    setIsVisibleModal(true);\n  };\n\n  return (\n    <div>\n      <PageHeader\n        className=\"publc-header\"\n        extra={[\n          <Button type=\"primary\" danger onClick={showModal}>\n            Login\n          </Button>,\n        ]}\n        title=\"Public header\"\n      />\n      <Modal\n        visible={isVisibleModal}\n        onOk={() => setIsVisibleModal(false)}\n        onCancel={() => setIsVisibleModal(false)}\n        width={400}\n      >\n        <LogIn />\n      </Modal>\n    </div>\n  );\n};\n\nexport default PublicHeader;\n","export function createActionTypes(base, actions = []) {\n  return actions.reduce((acc, type) => {\n    acc[type] = `${base}_${type}`;\n    return acc;\n  }, {});\n}\n\nexport function createAction(type, data = {}) {\n  console.log(\"data\", data);\n\n  return { type, payload: data };\n}\n","import { createActionTypes } from \"../../../../utils/index\";\n\nexport const USER_ADMIN = createActionTypes(\"USER_ADMIN\", [\n  \"GET\",\n  \"GET_ONE\",\n  \"RECEIVE\",\n  \"SAVE\",\n  \"PUT\",\n  \"DELETE\",\n  \"SUCCESS\",\n  \"SUCCESS_ONE\",\n  \"FAILURE\",\n]);\n\nexport default USER_ADMIN;\n","import { createAction } from \"../../../../utils/index\";\nimport { USER_ADMIN } from \"./userActionTypes\";\n\nexport const userAdminAction = {\n  request: () =>\n    createAction(USER_ADMIN.GET, {\n      fetching: true,\n      success: false,\n      error: null,\n    }),\n  requestOne: (id) =>\n    createAction(USER_ADMIN.GET_ONE, {\n      id,\n      fetching: true,\n      success: true,\n      error: null,\n    }),\n  success_one: (data) =>\n    createAction(USER_ADMIN.SUCCESS_ONE, {\n      ...data,\n      fetching: true,\n      success: true,\n      error: null,\n    }),\n  save: (data) =>\n    createAction(USER_ADMIN.SAVE, {\n      ...data,\n      fetching: true,\n      success: false,\n      error: null,\n    }),\n  put: (id, data) =>\n    createAction(USER_ADMIN.PUT, {\n      id,\n      ...data,\n      fetching: true,\n      success: false,\n      error: null,\n    }),\n  delete: (id) =>\n    createAction(USER_ADMIN.DELETE, {\n      id,\n      fetching: true,\n      success: false,\n      error: null,\n    }),\n  success: (data) =>\n    createAction(USER_ADMIN.SUCCESS, {\n      ...data,\n      fetching: true,\n      success: true,\n      error: null,\n    }),\n  failure: (error) =>\n    createAction(USER_ADMIN.FAILURE, {\n      ...error,\n      fetching: false,\n      success: false,\n    }),\n};\n\nexport default userAdminAction;\n","import { React, Component, Layout, connect } from \"../../global\";\nimport PublicHeader from \"../../components/PublicComponents/HeaderComponent/PublicHeader\";\nimport USER_ADMIN from \"../../redux/actions/admin/userAction\";\nconst { Footer, Content } = Layout;\n\nclass homePage extends Component {\n  componentDidMount() {\n    console.log(\"PROPS\", this.props);\n  }\n\n  render() {\n    console.log(\"render PROPS\", this.props);\n    return (\n      <div>\n        <Layout>\n          <PublicHeader />\n          <Content\n            width={1300}\n            style={{\n              height: \"840px\",\n              textAlign: \"center\",\n              backgroundColor: \"#eeeff1\",\n            }}\n          >\n            <div className=\"bgimg\">\n              <h1 className=\"middle\">COMING SOON</h1>\n            </div>\n          </Content>\n          <Footer style={{ textAlign: \"center\" }}>\n            Design ©2020 Created by Nikola Mrkic\n          </Footer>\n        </Layout>\n      </div>\n    );\n  }\n}\n\n// Map State To Props (Redux Store Passes State To Component)\nconst mapStateToProps = (state) => {\n  const userAdminState = state;\n  console.log(\"userAdminState state\", state);\n  // Redux Store --> Component\n  return {\n    adminUsers: userAdminState.adminUsers,\n  };\n};\n\n// anything returned from this function will end up as props\nfunction mapDispatchToProps(dispatch) {\n  return {\n    getAdminUsersAction: dispatch(USER_ADMIN.request()),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(homePage);\n","import {\n  React,\n  Button,\n  Divider,\n  Avatar,\n  PageHeader,\n  useState,\n  useHistory,\n} from \"../../../global\";\n\nconst AdminHeader = () => {\n  const UserList = [\"NM\", \"Lucy\"];\n  const ColorList = [\"#f56a00\"];\n\n  const [user] = useState(UserList[0]);\n  const [color] = useState(ColorList[0]);\n  const fakeAuth = {\n    isAuthenticated: false,\n    authenticate(cb) {\n      fakeAuth.isAuthenticated = true;\n      setTimeout(cb, 100); // fake async\n    },\n    signout(cb) {\n      fakeAuth.isAuthenticated = false;\n      setTimeout(cb, 100);\n    },\n  };\n  let history = useHistory();\n  return (\n    <div>\n      <PageHeader\n        avatar={{\n          src: \"https://avatars1.githubusercontent.com/u/8186664?s=460&v=4\",\n        }}\n        className=\"admin-header\"\n        onBack={() => {\n          fakeAuth.signout(() => history.push(\"/\"));\n        }}\n        extra={[\n          <Divider type=\"vertical\" size=\"big\" />,\n\n          <Button\n            type=\"primary\"\n            onClick={() => {\n              fakeAuth.signout(() => history.push(\"/\"));\n            }}\n          >\n            Sign out\n          </Button>,\n          <Divider type=\"vertical\" />,\n          <Avatar style={{ backgroundColor: color }} size=\"large\">\n            {user}\n          </Avatar>,\n        ]}\n        title=\"Admin header\"\n        subTitle=\"This is a subtitle\"\n      />\n    </div>\n  );\n};\n\nexport default AdminHeader;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Field, reduxForm } from \"redux-form\";\nimport input from \"./CustomInput\";\n\nconst validate = (values) => {\n  const errors = {};\n  if (!values.firstName) {\n    errors.firstName = \"Required\";\n  }\n  if (!values.lastName) {\n    errors.lastName = \"Required\";\n  }\n  console.log(\"The current set of errors is\", errors);\n  return errors;\n};\n\nconst onSubmit = (formProps) => {\n  alert(JSON.stringify(formProps));\n};\n\nlet UserForm = (props) => {\n  const { handleSubmit } = props;\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <div>\n        <div>\n          <Field\n            name=\"firstName\"\n            component={input}\n            type=\"text\"\n            placeholder=\"Ime\"\n          />\n        </div>\n      </div>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  // return {\n  //   initialValues: {\n  //     firstName: \"initialName\",\n  //   },\n  // };\n};\n\n// redux-form decorator\nUserForm = reduxForm({\n  form: \"userForm\",\n  validate,\n})(UserForm);\n\n// Important: connect only after calling reduxForm!!!\nexport default connect(mapStateToProps)(UserForm);\n","import UsersTable from \"../components/AdminComponents/tables/UsersTable\";\nimport UserForm from \"../components/AdminComponents/forms/user/UserForm\";\n\nconst DashboardRoutes = () => {\n  return [\n    {\n      path: \"/users\",\n      link: \"/users\",\n      // icon: TeamOutlined,\n      menuName: \"Tabela sa Korisnicima\",\n      component: UsersTable,\n    },\n    {\n      path: \"/user\",\n      link: \"/user\",\n      // icon: \"icon\",\n      menuName: \"Dodaj novog korisnika\",\n      component: UserForm,\n    },\n  ];\n};\n\nexport default DashboardRoutes();\n","import {\n  React,\n  useState,\n  Table,\n  Modal,\n  Button,\n  connect,\n  _,\n} from \"../../../global\";\nimport UserForm from \"../forms/user/UserForm\";\n\nconst UsersTable = (props) => {\n  console.log(\"props sa tabele\", props);\n  const [isVisibleModal, setIsVisibleModal] = useState(false);\n  const [useCurentUser, setCurentUser] = useState(\"\");\n\n  const dataSource = props.adminUsers.map((user, index) => ({\n    key: index,\n    userId: user.userId,\n    firstName: user.firstName,\n    lastName: user.lastName,\n    userName: user.userName,\n    email: user.email,\n    phone: user.phone,\n    address: user.address,\n    delete: user.delete,\n  }));\n\n  const columns = [\n    {\n      title: \"ID\",\n      dataIndex: \"userId\",\n      key: \"userId\",\n    },\n    {\n      title: \"Ime\",\n      dataIndex: \"firstName\",\n      key: \"firstName\",\n    },\n    {\n      title: \"Prezime\",\n      dataIndex: \"lastName\",\n      key: \"lastName\",\n    },\n    {\n      title: \"Korisnicko ime\",\n      dataIndex: \"userName\",\n      key: \"userName\",\n    },\n    {\n      title: \"Email\",\n      dataIndex: \"email\",\n      key: \"email\",\n    },\n    {\n      title: \"Telefon\",\n      dataIndex: \"phone\",\n      key: \"phone\",\n    },\n    {\n      title: \"Uredi\",\n      dataIndex: \"Edit\",\n      key: \"Edit\",\n      render: (text, data) => (\n        <Button type=\"primary\" onClick={() => handler(data)}>\n          Edit\n        </Button>\n      ),\n    },\n    {\n      title: \"Obrisi\",\n      dataIndex: \"Delete\",\n      key: \"Delete\",\n      render: () => (\n        <Button type=\"primary\" danger>\n          Delete\n        </Button>\n      ),\n    },\n  ];\n\n  const handler = (userForEdit) => {\n    setIsVisibleModal(true);\n    setCurentUser(userForEdit);\n  };\n\n  // const showModal = () => {\n  //   setIsVisibleModal(true);\n  // };\n\n  const tableData = _.orderBy(dataSource, \"id\", \"asc\");\n\n  return (\n    <div>\n      <Table\n        pagination={{ pageSize: 10 }}\n        dataSource={tableData}\n        columns={columns}\n      />\n      <Modal\n        title={\"test modal\"}\n        visible={isVisibleModal}\n        onOk={() => setIsVisibleModal(false)}\n        onCancel={() => setIsVisibleModal(false)}\n        width={1300}\n      >\n        <UserForm user={useCurentUser} />\n      </Modal>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const userAdminState = state;\n  console.log(\"STATE\", userAdminState);\n  // Redux Store --> Component\n  return {\n    adminUsers: userAdminState.adminUsers.data,\n    curentUser: userAdminState.adminUsers.currentUser,\n  };\n};\n\n// export default UsersTable;\nexport default connect(mapStateToProps)(UsersTable);\n","import {\n  React,\n  connect,\n  Menu,\n  Layout,\n  Component,\n  Route,\n  Switch,\n  Link,\n  UserOutlined,\n} from \"../../../src/global\";\nimport AdminHeader from \"../../components/AdminComponents/HeaderComponent/AdminHeader\";\nimport dashboardRoutes from \"../../helpers/DashboardRoutes\";\n\nconst { Content, Footer, Sider } = Layout;\nconst { SubMenu } = Menu;\n\nclass AdminPage extends Component {\n  state = {\n    collapsed: false,\n  };\n\n  onCollapse = (collapsed) => {\n    this.setState({ collapsed });\n  };\n  render() {\n    console.log(\"props sa admin strane\", this.props);\n    return (\n      <div>\n        <AdminHeader />\n        <Layout style={{ minHeight: \"56.4rem\" }}>\n          <Sider\n            collapsible\n            collapsed={this.state.collapsed}\n            onCollapse={this.onCollapse}\n          >\n            <Menu theme=\"dark\" defaultSelectedKeys={[\"0\"]} mode=\"inline\">\n              <SubMenu\n                key=\"sub1\"\n                title={\n                  <span>\n                    <UserOutlined />\n                    Korisnici\n                  </span>\n                }\n              >\n                {dashboardRoutes.map((data, index) => {\n                  return (\n                    <Menu.Item key={index}>\n                      <span> {data.icon}</span>\n                      <Link to={data.link}></Link>\n                      <span>{data.menuName}</span>\n                    </Menu.Item>\n                  );\n                })}\n              </SubMenu>\n            </Menu>\n          </Sider>\n          <Layout>\n            <Content style={{ margin: \"1.5rem 1.5rem\" }}>\n              <Switch>\n                {dashboardRoutes.map((route, index) => {\n                  return (\n                    <Route\n                      key={index}\n                      path={route.path}\n                      component={route.component}\n                      exact\n                    />\n                  );\n                })}\n              </Switch>\n            </Content>\n            <Footer style={{ textAlign: \"center\" }}></Footer>\n          </Layout>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  const userAdminState = state;\n  console.log(\"userAdminState Admin page\", userAdminState);\n  // Redux Store --> Component\n  return {\n    adminUsers: userAdminState.adminUsers.data,\n  };\n};\n\nexport default connect(mapStateToProps)(AdminPage);\n","import React, { Component } from \"react\";\n\nclass TestPage extends Component {\n  render() {\n    const { id } = this.props;\n    console.log(\"id\", id);\n    return <div>TEST PAGE</div>;\n  }\n}\n\nexport default TestPage;\n","import {\n  React,\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"../src/global\";\nimport \"../src/styles/styles.scss\";\nimport HomePage from \"../src/pages/public/HomePage\";\nimport AdminPage from \"../src/pages/admin/AdminPage\";\nimport LogIn from \"./components/PublicComponents/LogInComponent/LogIn\";\nimport TestPage from \"./pages/admin/TestPage\";\nexport default function AuthExample() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route exact={true} path=\"/\">\n            <HomePage />\n          </Route>\n          <Route path=\"/login\">\n            <LogIn />\n          </Route>\n\n          <Route path=\"/user/:id\">\n            <TestPage />\n          </Route>\n\n          <PrivateRoute path=\"/admin\">\n            <AdminPage />\n          </PrivateRoute>\n          <PrivateRoute path=\"/users\">\n            <AdminPage />\n          </PrivateRoute>\n          <PrivateRoute path=\"/user\">\n            <AdminPage />\n          </PrivateRoute>\n\n          <PrivateRoute path=\"/table\">\n            <AdminPage />\n          </PrivateRoute>\n\n          <PrivateRoute path=\"/admin\">\n            <AdminPage />\n          </PrivateRoute>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nconst fakeAuth = {\n  isAuthenticated: false,\n  authenticate(cb) {\n    fakeAuth.isAuthenticated = true;\n    setTimeout(cb, 100); // fake async\n  },\n  signout(cb) {\n    fakeAuth.isAuthenticated = false;\n    setTimeout(cb, 100);\n  },\n};\n\n// A wrapper for <Route> that redirects to the login\n// screen if you're not yet authenticated.\nfunction PrivateRoute({ children, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        fakeAuth.isAuthenticated ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/login\",\n              state: { from: location },\n            }}\n          />\n        )\n      }\n    >\n      <AdminPage />\n    </Route>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { put, call, takeLatest, all } from \"redux-saga/effects\";\nimport DataUtils from \"../../../DataUtils\";\nimport { userAdminAction } from \"../../actions/admin/userAction\";\nimport { USER_ADMIN } from \"../../actions/admin/userAction/userActionTypes\";\n\nfunction* handleGetAdminUsers() {\n  try {\n    const { data } = yield call(DataUtils.get, `/admin/users`);\n    console.log(\"data from saga\", data);\n    yield put(userAdminAction.success({ data }));\n    // yield put(userAdminAction.success({ data }));\n  } catch (e) {\n    yield put(userAdminAction.failure({ error: { ...e } }));\n  }\n}\n\nfunction* handleGetOne(action) {\n  try {\n    const { id } = action.payload;\n    const { data } = yield call(DataUtils.get, `/admin/user/` + id);\n    console.log(\"data from saga\", data);\n    yield put(userAdminAction.success_one({ data }));\n  } catch (e) {\n    yield put(userAdminAction.failure({ error: { ...e } }));\n  }\n}\n\nexport function* watchAllUserAdminSagas() {\n  yield all([\n    takeLatest(USER_ADMIN.GET, handleGetAdminUsers),\n    takeLatest(USER_ADMIN.GET_ONE, handleGetOne),\n    // takeLatest(USER_ADMIN.SAVE, handlePost),\n    // takeLatest(USER_ADMIN.PUT, handlePut),\n    // takeLatest(USER_ADMIN.PATCH, handlePatch),\n    // takeLatest(USER_ADMIN.DELETE, handleDelete),\n  ]);\n}\n\nexport default watchAllUserAdminSagas;\n","import { all, fork } from \"redux-saga/effects\";\nimport watchAllUserAdminSagas from \"./admin/userSagas\";\n\nexport default function* rootSaga() {\n  yield all([fork(watchAllUserAdminSagas)]);\n}\n","import { USER_ADMIN } from \"../../actions/admin/userAction/userActionTypes\";\n\nconst initialState = {\n  data: [],\n  currentUser: {},\n  fetching: false,\n  success: false,\n  error: null,\n};\n\nexport default function userAdminReducer(state = initialState, action) {\n  switch (action.type) {\n    case USER_ADMIN.GET:\n      return {\n        ...state,\n        data: action.payload,\n      };\n    case USER_ADMIN.GET_ONE:\n      return {\n        ...state,\n        currentUser: action.payload.data,\n      };\n    case USER_ADMIN.RECEIVE:\n    case USER_ADMIN.SAVE:\n    case USER_ADMIN.UPDATE:\n    case USER_ADMIN.DELETE:\n    case USER_ADMIN.SUCCESS:\n      return {\n        ...state,\n        data: action.payload.data,\n      };\n    case USER_ADMIN.SUCCESS_ONE:\n      return state.merge({ currentUser: action.payload.data });\n    case USER_ADMIN.FAILURE:\n      break;\n    default:\n      return {\n        ...state,\n      };\n  }\n}\n","import { combineReducers } from \"redux\";\nimport userAdminReducer from \"./admin/userReducer\";\nimport { reducer as formReducer } from \"redux-form/\";\n\nexport default function createReducer(asyncReducers) {\n  return combineReducers({\n    //Global state\n    adminUsers: userAdminReducer,\n    /**formReducer is an alias for reducer */\n    //using formReducer should have the key \"form\" in the redux store this should be for all the form\n    form: formReducer,\n    ...asyncReducers,\n  });\n}\n","import { fromJS } from \"immutable\";\nimport { compose, createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware, { END } from \"redux-saga\";\nimport rootReducer from \"./reducers/index\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst configureStore = (initialState = {}, history) => {\n  const composeEnhancers =\n    process.env.NODE_ENV !== \"production\" &&\n    typeof window === \"object\" &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n          shouldHotReload: false,\n        })\n      : compose;\n\n  const middlewares = [sagaMiddleware];\n\n  const enhancers = [applyMiddleware(...middlewares)];\n\n  const store = createStore(\n    rootReducer(),\n    fromJS(initialState),\n    composeEnhancers(...enhancers)\n  );\n\n  store.runSaga = sagaMiddleware.run;\n  store.asyncReducers = {};\n  store.close = () => store.dispatch(END);\n\n  if (module.hot) {\n    // Enable webpack hot module replacement for reducers\n    module.hot.accept(\"./reducers\", () => {\n      import(\"./reducers\").then((reducerModule) => {\n        const createReducers = reducerModule.default;\n        const nextReducers = createReducers(store.asyncReducers);\n        store.replaceReducer(nextReducers);\n      });\n    });\n  }\n\n  return store;\n};\n\nexport default configureStore;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { Router } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport rootSaga from \"./redux/sagas/index\";\nimport configureStore from \"./redux/store\";\n\nconst initialState = {};\nconst history = createBrowserHistory();\nconst store = configureStore(initialState, history);\nstore.runSaga(rootSaga);\n\nconst render = (Component) => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <Router history={history}>\n        <Component />\n      </Router>\n    </Provider>,\n    document.getElementById(\"root\")\n  );\n};\n\nrender(App);\n\nif (module.hot) {\n  module.hot.accept(\"./App\", () => {\n    // eslint-disable-next-line\n    const App = require(\"./App\").default;\n    render(App);\n  });\n}\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}